# PIPELINE DEFINITION
# Name: api-to-milvus-rag-ingestion-pipeline
# Description: Fetch data and embed into Milvus for RAG
# Inputs:
#    api_endpoint: str
#    collection_name: str [Default: 'servicenow_incidents']
#    milvus_host: str
#    milvus_port: str
components:
  comp-fetch-incidents-from-api:
    executorLabel: exec-fetch-incidents-from-api
    inputDefinitions:
      parameters:
        api_endpoint:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        incidents_data:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-ingest-incidents-to-milvus:
    executorLabel: exec-ingest-incidents-to-milvus
    inputDefinitions:
      artifacts:
        incidents_data:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        collection_name:
          defaultValue: servicenow_incidents
          isOptional: true
          parameterType: STRING
        milvus_host:
          parameterType: STRING
        milvus_port:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-fetch-incidents-from-api:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - fetch_incidents_from_api
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'requests' 'pymilvus'\
          \ 'sentence-transformers' 'marshmallow>=3.13.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef fetch_incidents_from_api(\n    api_endpoint: str,\n    incidents_data:\
          \ Output[Artifact]\n) -> None:\n    \"\"\"Fetches incidents from the mock\
          \ API and stores them as a JSON artifact.\"\"\"\n    import json\n    import\
          \ logging\n    import os\n    import requests\n    from typing import Optional,\
          \ List\n    from pymilvus import connections, utility, FieldSchema, CollectionSchema,\
          \ DataType, Collection\n    from sentence_transformers import SentenceTransformer\n\
          \n    logging.basicConfig(level=logging.INFO)\n    logging.info(f\"Calling\
          \ API: {api_endpoint}\")\n\n    try:\n        response = requests.get(api_endpoint)\n\
          \        response.raise_for_status()\n        data = response.json()\n \
          \   except Exception as e:\n        logging.error(f\"Failed to fetch incidents:\
          \ {e}\", exc_info=True)\n        raise\n\n    os.makedirs(os.path.dirname(incidents_data.path),\
          \ exist_ok=True)\n    with open(incidents_data.path, \"w\") as f:\n    \
          \    json.dump(data, f, indent=2)\n\n    logging.info(f\"Wrote incidents\
          \ to {incidents_data.path}\")\n\n"
        image: quay.io/cnuland/hello-chris-rag-json-pipeline:latest
    exec-ingest-incidents-to-milvus:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - ingest_incidents_to_milvus
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pymilvus' 'sentence-transformers'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef ingest_incidents_to_milvus(\n    incidents_data: Input[Artifact],\n\
          \    milvus_host: str,\n    milvus_port: str,\n    collection_name: str\
          \ = \"servicenow_incidents\",\n) -> None:\n    \"\"\"Parses incident data,\
          \ generates embeddings, and ingests into Milvus.\"\"\"\n    import json\n\
          \    import logging\n    import os\n    import requests\n    from typing\
          \ import Optional, List\n    from pymilvus import connections, utility,\
          \ FieldSchema, CollectionSchema, DataType, Collection\n    from sentence_transformers\
          \ import SentenceTransformer\n\n    logging.basicConfig(level=logging.INFO)\n\
          \    logging.info(\"Starting ingestion to Milvus...\")\n\n    try:\n   \
          \     connections.connect(\"default\", host=milvus_host, port=milvus_port)\n\
          \        logging.info(f\"Connected to Milvus at {milvus_host}:{milvus_port}\"\
          )\n    except Exception as e:\n        logging.error(f\"Connection to Milvus\
          \ failed: {e}\", exc_info=True)\n        raise\n\n    embedding_dim = 384\n\
          \    fields = [\n        FieldSchema(name=\"incident_pk\", dtype=DataType.VARCHAR,\
          \ is_primary=True, auto_id=False, max_length=20),\n        FieldSchema(name=\"\
          short_description\", dtype=DataType.VARCHAR, max_length=512),\n        FieldSchema(name=\"\
          resolution_notes\", dtype=DataType.VARCHAR, max_length=4096),\n        FieldSchema(name=\"\
          embedding\", dtype=DataType.FLOAT_VECTOR, dim=embedding_dim),\n    ]\n \
          \   schema = CollectionSchema(fields, \"ServiceNow Incidents Collection\
          \ for RAG\")\n\n    if utility.has_collection(collection_name):\n      \
          \  logging.warning(f\"Collection {collection_name} exists. Dropping...\"\
          )\n        utility.drop_collection(collection_name)\n    collection = Collection(collection_name,\
          \ schema)\n\n    try:\n        with open(incidents_data.path, \"r\") as\
          \ f:\n            data = json.load(f)\n    except Exception as e:\n    \
          \    logging.error(f\"Failed to read artifact: {e}\", exc_info=True)\n \
          \       raise\n\n    incidents = data.get(\"result\", [])\n    if not incidents:\n\
          \        logging.warning(\"No incidents to process.\")\n        return\n\
          \n    model = SentenceTransformer(\"all-MiniLM-L6-v2\", device=\"cpu\")\n\
          \    records = [\n        (\n            inc[\"number\"],\n            inc.get(\"\
          short_description\", \"\"),\n            inc[\"resolution_notes\"],\n  \
          \          model.encode(f\"Title: {inc.get('short_description', '')}\\nResolution:\
          \ {inc['resolution_notes']}\")\n        )\n        for inc in incidents\
          \ if inc.get(\"resolution_notes\")\n    ]\n\n    if not records:\n     \
          \   logging.warning(\"No valid incidents with resolution notes found.\"\
          )\n        return\n\n    incident_pks, short_descriptions, resolution_notes_list,\
          \ embeddings = zip(*records)\n    entities = [list(incident_pks), list(short_descriptions),\
          \ list(resolution_notes_list), list(embeddings)]\n\n    try:\n        insert_result\
          \ = collection.insert(entities)\n        collection.flush()\n        logging.info(f\"\
          Inserted {len(incident_pks)} records.\")\n    except Exception as e:\n \
          \       logging.error(f\"Failed to insert into Milvus: {e}\", exc_info=True)\n\
          \        raise\n\n    index_params = {\"metric_type\": \"L2\", \"index_type\"\
          : \"IVF_FLAT\", \"params\": {\"nlist\": 128}}\n    collection.create_index(\"\
          embedding\", index_params)\n    collection.load()\n    logging.info(\"Index\
          \ created and collection loaded.\")\n\n"
        image: quay.io/cnuland/hello-chris-rag-json-pipeline:latest
pipelineInfo:
  description: Fetch data and embed into Milvus for RAG
  name: api-to-milvus-rag-ingestion-pipeline
root:
  dag:
    tasks:
      fetch-incidents-from-api:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-fetch-incidents-from-api
        inputs:
          parameters:
            api_endpoint:
              componentInputParameter: api_endpoint
        taskInfo:
          name: fetch-incidents-from-api
      ingest-incidents-to-milvus:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-ingest-incidents-to-milvus
        dependentTasks:
        - fetch-incidents-from-api
        inputs:
          artifacts:
            incidents_data:
              taskOutputArtifact:
                outputArtifactKey: incidents_data
                producerTask: fetch-incidents-from-api
          parameters:
            collection_name:
              componentInputParameter: collection_name
            milvus_host:
              componentInputParameter: milvus_host
            milvus_port:
              componentInputParameter: milvus_port
        taskInfo:
          name: ingest-incidents-to-milvus
  inputDefinitions:
    parameters:
      api_endpoint:
        parameterType: STRING
      collection_name:
        defaultValue: servicenow_incidents
        isOptional: true
        parameterType: STRING
      milvus_host:
        parameterType: STRING
      milvus_port:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.13.0
