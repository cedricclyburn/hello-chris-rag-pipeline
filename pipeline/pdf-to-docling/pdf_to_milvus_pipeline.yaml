# PIPELINE DEFINITION
# Name: pdf-to-milvus-ingestion-pipeline
# Description: Downloads a PDF from S3, parses with Docling, and ingests into Milvus.
# Inputs:
#    collection_name: str [Default: 'docling_pdf_collection']
#    milvus_host: str [Default: 'vectordb-milvus']
#    milvus_port: str [Default: '19530']
#    s3_access_key: str
#    s3_bucket: str
#    s3_endpoint_url: str
#    s3_key: str
#    s3_secret_key: str
components:
  comp-download-pdf-from-s3:
    executorLabel: exec-download-pdf-from-s3
    inputDefinitions:
      parameters:
        s3_access_key:
          parameterType: STRING
        s3_bucket:
          parameterType: STRING
        s3_endpoint_url:
          parameterType: STRING
        s3_key:
          parameterType: STRING
        s3_secret_key:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        downloaded_pdf_file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-ingest-docling-output-to-milvus:
    executorLabel: exec-ingest-docling-output-to-milvus
    inputDefinitions:
      artifacts:
        docling_json:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        collection_name:
          parameterType: STRING
        document_id:
          parameterType: STRING
        milvus_host:
          parameterType: STRING
        milvus_port:
          parameterType: STRING
  comp-process-pdf-with-docling:
    executorLabel: exec-process-pdf-with-docling
    inputDefinitions:
      artifacts:
        pdf_artifact:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        docling_output_json:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-download-pdf-from-s3:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_pdf_from_s3
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_pdf_from_s3(\n    s3_bucket: str,\n    s3_key: str,\n\
          \    s3_endpoint_url: str,\n    s3_access_key: str,\n    s3_secret_key:\
          \ str,\n    downloaded_pdf_file: dsl.Output[dsl.Artifact]\n):\n    \"\"\"\
          Downloads a specific PDF file from an S3 bucket.\"\"\"\n    import boto3\n\
          \    import logging\n\n    logging.basicConfig(level=logging.INFO, format='%(asctime)s\
          \ - %(levelname)s - %(message)s')\n\n    if not all([s3_endpoint_url, s3_access_key,\
          \ s3_secret_key]):\n        logging.error(\"S3 credentials or endpoint URL\
          \ parameters are missing.\")\n        raise ValueError(\"Missing S3 configuration\
          \ parameters.\")\n\n    logging.info(f\"Attempting to download s3://{s3_bucket}/{s3_key}\"\
          )\n\n    try:\n        s3_client = boto3.client(\n            's3',\n  \
          \          endpoint_url=s3_endpoint_url,\n            aws_access_key_id=s3_access_key,\n\
          \            aws_secret_access_key=s3_secret_key,\n        )\n        s3_client.download_file(s3_bucket,\
          \ s3_key, downloaded_pdf_file.path)\n        logging.info(f\"Successfully\
          \ downloaded PDF to artifact path: {downloaded_pdf_file.path}\")\n    except\
          \ Exception as e:\n        logging.error(f\"Error downloading from S3: {e}\"\
          , exc_info=True)\n        raise\n\n"
        image: quay.io/cnuland/docling-pipeline:latest
    exec-ingest-docling-output-to-milvus:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - ingest_docling_output_to_milvus
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef ingest_docling_output_to_milvus(\n    docling_json: dsl.Input[dsl.Artifact],\n\
          \    milvus_host: str,\n    milvus_port: str,\n    collection_name: str,\n\
          \    document_id: str, # e.g., the original S3 key\n):\n    \"\"\"Ingests\
          \ processed document text into a Milvus collection.\"\"\"\n    import json\n\
          \    import logging\n    from pymilvus import connections, utility, FieldSchema,\
          \ CollectionSchema, DataType, Collection\n    from sentence_transformers\
          \ import SentenceTransformer\n\n    logging.basicConfig(level=logging.INFO,\
          \ format='%(asctime)s - %(levelname)s - %(message)s')\n\n    logging.info(f\"\
          Starting Milvus ingestion for document: {document_id}\")\n    logging.info(f\"\
          Attempting to connect to Milvus at {milvus_host}:{milvus_port}\")\n    try:\n\
          \        connections.connect(\"default\", host=milvus_host, port=milvus_port,\
          \ timeout=10)\n        logging.info(\"Successfully connected to Milvus.\"\
          )\n    except Exception as e:\n        logging.error(f\"Failed to connect\
          \ to Milvus: {e}\", exc_info=True)\n        raise\n\n    embedding_dim =\
          \ 384\n    fields = [\n        FieldSchema(name=\"doc_pk\", dtype=DataType.VARCHAR,\
          \ is_primary=True, auto_id=False, max_length=1024),\n        FieldSchema(name=\"\
          text_chunk\", dtype=DataType.VARCHAR, max_length=65535),\n        FieldSchema(name=\"\
          embedding\", dtype=DataType.FLOAT_VECTOR, dim=embedding_dim)\n    ]\n  \
          \  schema = CollectionSchema(fields, \"Parsed PDF Document Collection (Docling)\"\
          )\n\n    if not utility.has_collection(collection_name):\n        logging.info(f\"\
          Collection '{collection_name}' does not exist. Creating it now.\")\n   \
          \     collection = Collection(collection_name, schema)\n    else:\n    \
          \    logging.info(f\"Using existing collection: '{collection_name}'\")\n\
          \        collection = Collection(collection_name)\n\n    logging.info(f\"\
          Loading docling JSON from artifact at {docling_json.path}\")\n    with open(docling_json.path,\
          \ 'r') as f:\n        doc_data = json.load(f)\n\n    # Extract all text\
          \ content from the parsed document\n    full_text = \" \".join([p['text']\
          \ for p in doc_data.get('paragraphs', [])])\n\n    if not full_text:\n \
          \       logging.warning(\"No text found in the parsed document. Exiting.\"\
          )\n        return\n\n    logging.info(\"Loading sentence-transformer model\
          \ 'all-MiniLM-L6-v2'...\")\n    model = SentenceTransformer('all-MiniLM-L6-v2',\
          \ device='cpu')\n\n    logging.info(\"Generating embedding for the document\
          \ text...\")\n    embedding = model.encode(full_text)\n\n    entities =\
          \ [\n        [document_id], # Primary key\n        [full_text],   # The\
          \ full text content\n        [embedding]    # The vector embedding\n   \
          \ ]\n\n    logging.info(f\"Inserting 1 entity into Milvus for document '{document_id}'...\"\
          )\n    try:\n        insert_result = collection.insert(entities)\n     \
          \   collection.flush()\n        logging.info(f\"Successfully inserted entity.\
          \ Mutation result: {insert_result}\")\n    except Exception as e:\n    \
          \    logging.error(f\"Failed during Milvus insert/flush operation: {e}\"\
          , exc_info=True)\n        raise\n\n    # Ensure index exists for searching\n\
          \    if not collection.has_index():\n        index_params = {\"metric_type\"\
          : \"L2\", \"index_type\": \"IVF_FLAT\", \"params\": {\"nlist\": 128}}\n\
          \        logging.info(f\"Creating index with params: {index_params}\")\n\
          \        collection.create_index(field_name=\"embedding\", index_params=index_params)\n\
          \        logging.info(\"Index created.\")\n\n    collection.load()\n   \
          \ logging.info(\"Collection loaded into memory. Component finished.\")\n\
          \n"
        image: quay.io/cnuland/docling-pipeline:latest
    exec-process-pdf-with-docling:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - process_pdf_with_docling
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef process_pdf_with_docling(\n    pdf_artifact: dsl.Input[dsl.Artifact],\n\
          \    docling_output_json: dsl.Output[dsl.Artifact]\n):\n    \"\"\"Processes\
          \ a PDF file using Docling and outputs structured JSON.\"\"\"\n    import\
          \ pathlib\n    import logging\n    from docling.document_converter import\
          \ DocumentConverter\n\n    logging.basicConfig(level=logging.INFO, format='%(asctime)s\
          \ - %(levelname)s - %(message)s')\n\n    pdf_input_path = pathlib.Path(pdf_artifact.path)\n\
          \    output_json_path = pathlib.Path(docling_output_json.path)\n\n    logging.info(f\"\
          Processing PDF: {pdf_input_path.name} with docling...\")\n    logging.info(f\"\
          Docling output will be saved to: {output_json_path}\")\n\n    doc_converter\
          \ = DocumentConverter()\n    conv_results = doc_converter.convert_all([pdf_input_path],\
          \ raises_on_error=True)\n\n    if conv_results and conv_results[0].document:\n\
          \        conv_res = conv_results[0]\n        logging.info(f\"Docling successfully\
          \ parsed document. Status: {conv_res.status}\")\n        conv_res.document.save_as_json(output_json_path)\n\
          \        logging.info(\"Successfully saved docling output as JSON artifact.\"\
          )\n    else:\n        raise RuntimeError(f\"Docling conversion failed or\
          \ returned no document for {pdf_input_path.name}\")\n\n"
        image: quay.io/cnuland/docling-pipeline:latest
pipelineInfo:
  description: Downloads a PDF from S3, parses with Docling, and ingests into Milvus.
  name: pdf-to-milvus-ingestion-pipeline
root:
  dag:
    tasks:
      download-pdf-from-s3:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-pdf-from-s3
        inputs:
          parameters:
            s3_access_key:
              componentInputParameter: s3_access_key
            s3_bucket:
              componentInputParameter: s3_bucket
            s3_endpoint_url:
              componentInputParameter: s3_endpoint_url
            s3_key:
              componentInputParameter: s3_key
            s3_secret_key:
              componentInputParameter: s3_secret_key
        taskInfo:
          name: Download PDF from S3
      ingest-docling-output-to-milvus:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-ingest-docling-output-to-milvus
        dependentTasks:
        - process-pdf-with-docling
        inputs:
          artifacts:
            docling_json:
              taskOutputArtifact:
                outputArtifactKey: docling_output_json
                producerTask: process-pdf-with-docling
          parameters:
            collection_name:
              componentInputParameter: collection_name
            document_id:
              componentInputParameter: s3_key
            milvus_host:
              componentInputParameter: milvus_host
            milvus_port:
              componentInputParameter: milvus_port
        taskInfo:
          name: Ingest Document to Milvus
      process-pdf-with-docling:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-process-pdf-with-docling
        dependentTasks:
        - download-pdf-from-s3
        inputs:
          artifacts:
            pdf_artifact:
              taskOutputArtifact:
                outputArtifactKey: downloaded_pdf_file
                producerTask: download-pdf-from-s3
        taskInfo:
          name: Process PDF with Docling
  inputDefinitions:
    parameters:
      collection_name:
        defaultValue: docling_pdf_collection
        isOptional: true
        parameterType: STRING
      milvus_host:
        defaultValue: vectordb-milvus
        isOptional: true
        parameterType: STRING
      milvus_port:
        defaultValue: '19530'
        isOptional: true
        parameterType: STRING
      s3_access_key:
        parameterType: STRING
      s3_bucket:
        parameterType: STRING
      s3_endpoint_url:
        parameterType: STRING
      s3_key:
        parameterType: STRING
      s3_secret_key:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.13.0
