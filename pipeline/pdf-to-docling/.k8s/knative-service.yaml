apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: kfp-s3-trigger
  namespace: rag-pipeline-workshop
  annotations:
    # This is CRITICAL because your KnativeServing CR has istio: enabled: true
    networking.knative.dev/ingress-class: "istio.ingress.networking.knative.dev"
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/minScale: "1"
        queue.serving.knative.dev/userPort: "8080"
        # Consider if sidecar injection is needed for your user pod if Istio is the mesh.
        # If your Knative's Istio Gateway is routing to services that are also part of the mesh,
        # injection is typically needed. If it's routing to non-mesh k8s services, 'false' might be fine.
        # Given rewriteAppHTTPProbers is true for Knative components, your app might need it too for probes via mesh.
        # Try with 'true' or remove to use namespace default if Istio injection is enabled for the namespace.
        sidecar.istio.io/inject: "true" # TRY THIS or remove to see if namespace default applies
        sidecar.istio.io/rewriteAppHTTPProbers: "true" # Might be needed if sidecar is injected
    spec:
      serviceAccountName: kfp-trigger-sa
      containers:
        - image: quay.io/cnuland/hello-chris-rag-pipeline-event:latest # Corrected image name
          name: user-container
          ports:
            - name: http1 # Standard Knative port name for user container
              containerPort: 8080
          env:
            - name: KFP_ENDPOINT
              # Assuming KFP service is within the cluster and uses HTTP internally.
              # If KFP is also in the Istio mesh, its FQDN should be resolvable.
              value: "http://ds-pipeline-pipelines-definition.your-osai-project.svc.cluster.local:8888" # CHANGEME
            - name: KFP_PIPELINE_NAME
              value: "Simple PDF Processing Pipeline"
            - name: KFP_EXPERIMENT_NAME
              value: "S3 Triggered PDF Runs"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080 # This is the user container port. Istio sidecar will handle rewriting if probes are enabled.
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3