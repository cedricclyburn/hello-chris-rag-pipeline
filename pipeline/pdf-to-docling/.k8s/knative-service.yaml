apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: kfp-s3-trigger
  namespace: rag-pipeline-workshop # Ensure this namespace exists
spec:
  template:
    metadata:
      annotations:
        # Keep pods active, good for debugging, adjust for production if scale-to-zero is desired
        autoscaling.knative.dev/minScale: "1" 
        # Standard annotation for queue-proxy to know your app's port
        queue.serving.knative.dev/userPort: "8080" 
    spec:
      serviceAccountName: kfp-trigger-sa
      containers:
        - image: quay.io/cnuland/hello-chris-rag-pipeline:latest # ✅ VERIFY THIS IMAGE NAME (removed -event)
          ports:
            - name: http1 # Knative convention, name is optional but good practice
              containerPort: 8080
          env:
            - name: KFP_ENDPOINT
              # ✅ CHANGEME: Ensure this is the correct and reachable KFP API endpoint
              value: "https://ds-pipeline.rag-pipeline-workshop.svc.cluster.local" 
            - name: KFP_PIPELINE_NAME
              value: "Simple PDF Processing Pipeline"
            - name: KFP_EXPERIMENT_NAME
              value: "S3 Triggered PDF Runs"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /healthz # Your Flask app MUST serve GET on this path with 200 OK
              port: 8080 # Matches containerPort
              scheme: HTTP
            initialDelaySeconds: 15 # Give app a bit more time to start
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30 # Give app a bit more time to start
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3