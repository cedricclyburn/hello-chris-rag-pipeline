# PIPELINE DEFINITION
# Name: api-to-milvus-rag-ingestion-pipeline
# Description: Fetches incident data from an API and ingests it into a Milvus vector DB.
# Inputs:
#    api_endpoint: str [Default: 'http://mock-servicenow-api-svc.user3.svc.cluster.local:8080/api/v1/incidents?state=closed']
#    collection_name: str [Default: 'servicenow_incidents']
#    milvus_host: str [Default: 'vectordb-milvus.user3.svc.cluster.local']
#    milvus_port: str [Default: '19530']
components:
  comp-fetch-incidents-from-api:
    executorLabel: exec-fetch-incidents-from-api
    inputDefinitions:
      parameters:
        api_endpoint:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        incidents_data:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-ingest-incidents-to-milvus:
    executorLabel: exec-ingest-incidents-to-milvus
    inputDefinitions:
      artifacts:
        incidents_data:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        collection_name:
          defaultValue: servicenow_incidents
          isOptional: true
          parameterType: STRING
        milvus_host:
          parameterType: STRING
        milvus_port:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-fetch-incidents-from-api:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - fetch_incidents_from_api
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef fetch_incidents_from_api(\n    api_endpoint: str,\n    # CORRECTED:\
          \ Changed from OutputPath to the more standard dsl.Output[dsl.Artifact]\n\
          \    incidents_data: dsl.Output[dsl.Artifact]\n):\n    \"\"\"Fetches closed-incident\
          \ data from the mock ServiceNow API.\"\"\"\n    import requests\n    import\
          \ json\n\n    print(f\"Fetching data from endpoint: {api_endpoint}\")\n\n\
          \    # Parameters to fetch all closed incidents\n    params = {'state':\
          \ 'closed', 'limit': 200}\n\n    try:\n        response = requests.get(api_endpoint,\
          \ params=params)\n        response.raise_for_status()  # Raises an error\
          \ for bad responses\n\n        data = response.json()\n\n        # CORRECTED:\
          \ Use the .path attribute to write to the artifact file\n        with open(incidents_data.path,\
          \ 'w') as f:\n            json.dump(data, f)\n\n        print(f\"Successfully\
          \ fetched {len(data.get('result', []))} incidents and saved to {incidents_data.path}\"\
          )\n\n    except requests.exceptions.RequestException as e:\n        print(f\"\
          Error fetching data from API: {e}\")\n        raise\n\n"
        image: quay.io/cnuland/hello-chris-rag-json-pipeline:latest
    exec-ingest-incidents-to-milvus:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - ingest_incidents_to_milvus
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef ingest_incidents_to_milvus(\n    # CORRECTED: Changed from InputPath\
          \ to the more standard dsl.Input[dsl.Artifact]\n    incidents_data: dsl.Input[dsl.Artifact],\n\
          \    milvus_host: str,\n    milvus_port: str,\n    collection_name: str\
          \ = \"servicenow_incidents\",\n):\n    \"\"\"Parses incident data, generates\
          \ embeddings, and ingests into Milvus.\"\"\"\n    import json\n    from\
          \ pymilvus import connections, utility, FieldSchema, CollectionSchema, DataType,\
          \ Collection\n    from sentence_transformers import SentenceTransformer\n\
          \n    # 1. Connect to Milvus using the provided service name and port\n\
          \    print(f\"Attempting to connect to Milvus at {milvus_host}:{milvus_port}\"\
          )\n    try:\n        connections.connect(\"default\", host=milvus_host,\
          \ port=milvus_port)\n        print(\"Successfully connected to Milvus.\"\
          )\n    except Exception as e:\n        print(f\"Failed to connect to Milvus:\
          \ {e}\")\n        raise\n\n    # 2. Define the collection schema\n    embedding_dim\
          \ = 384  # Based on the 'all-MiniLM-L6-v2' model\n\n    fields = [\n   \
          \     FieldSchema(name=\"incident_pk\", dtype=DataType.VARCHAR, is_primary=True,\
          \ auto_id=False, max_length=20),\n        FieldSchema(name=\"short_description\"\
          , dtype=DataType.VARCHAR, max_length=512),\n        FieldSchema(name=\"\
          resolution_notes\", dtype=DataType.VARCHAR, max_length=4096),\n        FieldSchema(name=\"\
          embedding\", dtype=DataType.FLOAT_VECTOR, dim=embedding_dim)\n    ]\n\n\
          \    schema = CollectionSchema(fields, \"ServiceNow Incidents Collection\
          \ for RAG\")\n\n    # 3. Create the collection if it doesn't exist, dropping\
          \ the old one for a fresh start\n    if utility.has_collection(collection_name):\n\
          \        print(f\"Collection '{collection_name}' already exists. Dropping\
          \ for a clean import.\")\n        utility.drop_collection(collection_name)\n\
          \n    print(f\"Creating collection: {collection_name}\")\n    collection\
          \ = Collection(collection_name, schema)\n\n    # 4. Load incident data and\
          \ generate embeddings\n    print(f\"Loading incident data from artifact\
          \ at {incidents_data.path}...\")\n    # CORRECTED: Use the .path attribute\
          \ to read the artifact file\n    with open(incidents_data.path, 'r') as\
          \ f:\n        data = json.load(f)\n\n    incidents = data.get('result',\
          \ [])\n    if not incidents:\n        print(\"No incidents found in the\
          \ data. Exiting.\")\n        return\n\n    print(\"Loading sentence-transformer\
          \ model 'all-MiniLM-L6-v2'...\")\n    model = SentenceTransformer('all-MiniLM-L6-v2',\
          \ device='cpu')\n\n    incident_pks = []\n    short_descriptions = []\n\
          \    resolution_notes_list = []\n    embeddings = []\n\n    print(f\"Preparing\
          \ and embedding {len(incidents)} incidents...\")\n    for inc in incidents:\n\
          \        if inc.get('resolution_notes'):\n            incident_pks.append(inc['number'])\n\
          \            short_descriptions.append(inc.get('short_description', ''))\n\
          \n            resolution_note = inc['resolution_notes']\n            resolution_notes_list.append(resolution_note)\n\
          \n            text_to_embed = f\"Title: {inc.get('short_description', '')}\\\
          nResolution: {resolution_note}\"\n            embeddings.append(model.encode(text_to_embed))\n\
          \n    if not incident_pks:\n        print(\"No incidents with resolution\
          \ notes were found to ingest. Exiting.\")\n        return\n\n    # 5. Insert\
          \ data into Milvus\n    entities = [\n        incident_pks,\n        short_descriptions,\n\
          \        resolution_notes_list,\n        embeddings\n    ]\n\n    print(f\"\
          Inserting {len(incident_pks)} entities into Milvus...\")\n    insert_result\
          \ = collection.insert(entities)\n    collection.flush()\n\n    print(f\"\
          Successfully inserted entities. Mutation result: {insert_result}\")\n\n\
          \    # 6. Create an index for efficient searching\n    index_params = {\n\
          \        \"metric_type\": \"L2\",\n        \"index_type\": \"IVF_FLAT\"\
          ,\n        \"params\": {\"nlist\": 128}\n    }\n    print(f\"Creating index\
          \ with params: {index_params}\")\n    collection.create_index(field_name=\"\
          embedding\", index_params=index_params)\n    collection.load()\n    print(\"\
          Index created and collection loaded into memory.\")\n\n"
        image: quay.io/cnuland/hello-chris-rag-json-pipeline:latest
pipelineInfo:
  description: Fetches incident data from an API and ingests it into a Milvus vector
    DB.
  name: api-to-milvus-rag-ingestion-pipeline
root:
  dag:
    tasks:
      fetch-incidents-from-api:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-fetch-incidents-from-api
        inputs:
          parameters:
            api_endpoint:
              componentInputParameter: api_endpoint
        taskInfo:
          name: Fetch ServiceNow Incidents
      ingest-incidents-to-milvus:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-ingest-incidents-to-milvus
        dependentTasks:
        - fetch-incidents-from-api
        inputs:
          artifacts:
            incidents_data:
              taskOutputArtifact:
                outputArtifactKey: incidents_data
                producerTask: fetch-incidents-from-api
          parameters:
            collection_name:
              componentInputParameter: collection_name
            milvus_host:
              componentInputParameter: milvus_host
            milvus_port:
              componentInputParameter: milvus_port
        taskInfo:
          name: Ingest Incidents to Milvus
  inputDefinitions:
    parameters:
      api_endpoint:
        defaultValue: http://mock-servicenow-api-svc.user3.svc.cluster.local:8080/api/v1/incidents?state=closed
        isOptional: true
        parameterType: STRING
      collection_name:
        defaultValue: servicenow_incidents
        isOptional: true
        parameterType: STRING
      milvus_host:
        defaultValue: vectordb-milvus.user3.svc.cluster.local
        isOptional: true
        parameterType: STRING
      milvus_port:
        defaultValue: '19530'
        isOptional: true
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.13.0
