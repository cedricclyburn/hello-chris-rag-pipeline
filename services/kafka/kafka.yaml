apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: kafka-cluster       # Name of your Kafka cluster
  namespace: kafka              # Namespace where Kafka is deployed
spec:
  kafka:
    version: "3.8.0"            # Ensure this Kafka version is supported by your Strimzi operator
    replicas: 1                 # Single broker for PoC/dev (use 3+ for production)
    listeners:
      # Plain listener for internal cluster communication (port 9092)
      - name: plain
        port: 9092
        type: internal
        tls: false
        configuration:
          # Strimzi will use the service FQDN for advertised.listeners for this listener
          useServiceDnsDomain: true
          # Kafka brokers will advertise themselves as:
          # <pod-name>.kafka-cluster-kafka-brokers.kafka.svc.cluster.local:9092

      # TLS listener for internal cluster communication (port 9093)
      - name: tls
        port: 9093
        type: internal
        tls: true
        authentication:
          type: tls # Enables TLS client authentication for this listener if needed by clients
        configuration:
          # Strimzi will use the service FQDN for advertised.listeners for this listener
          useServiceDnsDomain: true
          # Kafka brokers will advertise themselves as:
          # <pod-name>.kafka-cluster-kafka-brokers.kafka.svc.cluster.local:9093
          # Broker-to-broker communication will also use this if enabled.
          # Ensure clients (like Knative components) are configured to use TLS and trust the CA
          # if they connect to this port.

    # Example of an optional external listener via OpenShift Route (not enabled here)
    # - name: external
    #   port: 9094
    #   type: route
    #   tls: true
    #   authentication:
    #     type: scram-sha-512 # Or tls, or oauth

    storage:
      type: ephemeral           # Data lost on pod restart. Use 'persistent-claim' for production.

    logging:
      type: inline
      loggers:
        rootLogger.level: DEBUG
        logger.kafka.level: DEBUG
        logger.logcleaner.level: DEBUG
        logger.authorizer.level: TRACE

    config:
      # Essential broker configurations for a single-node cluster
      broker.id: ${STRIMZI_BROKER_ID} # Strimzi injects this based on the pod ordinal
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      # Align with Kafka version
      log.message.format.version: "3.8"
      inter.broker.protocol.version: "3.8"
      # For the TLS listener, ensure hostname verification is enabled if clients expect it.
      # Strimzi usually handles the certs correctly for internal listeners.
      # ssl.endpoint.identification.algorithm: https # Usually needed if clients verify hostname for TLS

      # The explicit listener.name.<name>.advertised.listeners have been removed.
      # Strimzi will now derive these from the `listeners` array configuration above,
      # especially with `useServiceDnsDomain: true`.
      # If you still face DNS issues from clients after the broker is stable,
      # you might need to re-introduce them or use the global 'advertised.listeners' key.
      # Example of global advertised.listeners (if you prefer to be very explicit):
      # advertised.listeners: PLAINTEXT://kafka-cluster-kafka-0.kafka-cluster-kafka-brokers.kafka.svc.cluster.local:9092,SSL://kafka-cluster-kafka-0.kafka-cluster-kafka-brokers.kafka.svc.cluster.local:9093
      # However, for a multi-broker setup, the ${HOSTNAME} variable or Strimzi's auto-config is better.

    # Uncomment and adjust resources for production
    # resources:
    #   requests:
    #     memory: 2Gi
    #     cpu: "1"
    #   limits:
    #     memory: 4Gi
    #     cpu: "2"

  zookeeper:
    replicas: 1                 # Single Zookeeper for PoC/dev (use 3+ for production)
    storage:
      type: ephemeral           # Use 'persistent-claim' for production.
    # resources:
    #   requests:
    #     memory: 1Gi
    #     cpu: "500m"
    #   limits:
    #     memory: 2Gi
    #     cpu: "1"

  entityOperator:
    topicOperator: {}           # Manages KafkaTopic CRs
    userOperator: {}            # Manages KafkaUser CRs