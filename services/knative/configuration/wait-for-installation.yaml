# This manifest creates the necessary RBAC resources and the Job to wait for CRDs.
# It should be included in your services/knative/kustomization.yaml

---
# 1. A dedicated Service Account for the wait job.
# The namespace will be injected by ArgoCD based on the Application's destination.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: knative-wait-sa
  annotations:
    # ArgoCD Sync Wave: This must be created before the Job and RoleBinding.
    argocd.argoproj.io/sync-wave: "1"

---
# 2. A ClusterRole granting permissions to check for API resources.
# This is cluster-scoped and does not have a namespace.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: knative-api-resource-viewer
  annotations:
    argocd.argoproj.io/sync-wave: "1"
rules:
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get"]
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list"] # Required for `oc api-resources`

---
# 3. A ClusterRoleBinding to grant the ClusterRole to our ServiceAccount.
# This is also cluster-scoped.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: knative-api-resource-viewer-binding
  annotations:
    # Runs after the SA and Role are created.
    argocd.argoproj.io/sync-wave: "2"
subjects:
- kind: ServiceAccount
  name: knative-wait-sa
  # IMPORTANT: This namespace MUST match the destination namespace in your
  # ArgoCD Application manifest for Knative (bootstrap/app-knative-broker.yaml).
  namespace: rag-pipeline-workshop
roleRef:
  kind: ClusterRole
  name: knative-api-resource-viewer
  apiGroup: rbac.authorization.k8s.io

---
# 4. The updated Job, now using the dedicated ServiceAccount.
# The namespace will be injected by ArgoCD.
apiVersion: batch/v1
kind: Job
metadata:
  # Using both 'name' (for Kustomize validation) and 'generateName' (for runtime uniqueness)
  name: wait-for-knative-crds
  generateName: wait-for-knative-crds-
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    # This Job runs in a later wave after its SA and RoleBinding are created.
    argocd.argoproj.io/sync-wave: "3"
spec:
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: knative-wait-sa # Using the new SA with correct permissions
      restartPolicy: OnFailure
      containers:
      - name: crd-checker
        image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "--- Waiting for Knative API Resources to become available ---"

          # This is a more robust check. It waits for the API server to be actually serving the resource.
          until oc api-resources --api-group=eventing.knative.dev | grep -q "brokers"; do
            echo "Waiting for Broker API resource to be available..."; sleep 15;
          done
          echo "SUCCESS: Broker API resource is available."

          until oc api-resources --api-group=eventing.knative.dev | grep -q "triggers"; do
            echo "Waiting for Trigger API resource to be available..."; sleep 15;
          done
          echo "SUCCESS: Trigger API resource is available."
          
          echo "All required Knative API resources are present. Sync can continue."